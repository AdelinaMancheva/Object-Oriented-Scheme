#lang racket

;(define obj (new-instance Object))
;(send 'type-of obj)

;(define num (new-instance Number))
;(send 'type-of num)
;(send 'get-state num)
;(send 'add num)

;(define rat (new-instance Rational 5 2))
;(define rat2 (new-instance Rational 1 2))
;(send 'type-of rat)
;(send 'get-numer rat)
;(send 'get-denom rat)
;(define sum (send 'add rat rat2))
;(send 'get-numer sum)
;(send 'get-denom sum)
;(define rational (list (send 'get-numer sum) "/" (send 'get-denom sum)))
;(display rational)
;(send 'pretty-print sum sum)
;(define sub (send 'subtract rat rat2))
;(send 'pretty-print sub sub)
;(define mul (send 'mult rat rat2))
;(send 'pretty-print mul mul)
;(define d (send 'div rat rat2))
;(send 'pretty-print d d)
;(define p (send 'pow rat 2))
;(display "Pow rational: ")
;(send 'pretty-print p p)

;(define c0 (new-instance Complex 2 3))
;(define c1 (new-instance Complex 1 2))
;(send 'type-of c)
;(display "Real part: ") (send 'get-real c)
;(display "Imaginer part: ") (send 'get-imag c)
;(define s (send 'add c0 c1))
;(display "Add: ") (send 'pretty-print s s)
;(define sub (send 'subtract c0 c1))
;(display "Subtract: ") (send 'pretty-print-subtract sub sub)
;(display "Conjugate: ") (send 'pretty-print-subtract s s)
;(define m (send 'mult c0 c1))
;(display "Multiplication: ") (send 'pprint m m)
;(define d (send 'div c0 c1))
;(display "Division: ") (send 'pprint d d)

;(define int (new-instance Integer 3))
;(define int2 (new-instance Integer 2))
;(send 'type-of int)
;(send 'get-int int)
;(define s (send 'add int int2))
;(display "Add: ") (send 'get-int s)
;(define sub (send 'subtract int int2))
;(display "Subtraction: ") (send 'get-int sub)
;(define m (send 'mult int int2))
;(display "Multiplication: ") (send 'get-int m)
;(define d (send 'div int int2))
;(display "Division: ") (send 'get-int d)
;(define e (send 'pow int int2))
;(display "Pow: ")
;(send 'get-int e)
